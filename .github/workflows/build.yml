name: Build Focus App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # 允许手动触发

jobs:
  build:
    runs-on: macos-latest  # 使用最新的macOS运行环境
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Install dependencies
      run: |
        # 如果有CocoaPods依赖，取消下面注释
        # pod install
        
    - name: Build macOS app
      run: |
        # 列出scheme
        echo "Available schemes:"
        xcodebuild -list -project Focus.xcodeproj || echo "Error: Could not list schemes"
        
        # 创建构建目录
        mkdir -p ./Build
        
        # 尝试构建应用 (使用无签名方式)
        echo "Building Focus app..."
        xcodebuild clean build -project Focus.xcodeproj -scheme Focus -configuration Release -derivedDataPath ./DerivedData CODE_SIGN_IDENTITY=- CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO || {
          echo "Error: Failed to build using 'Focus' scheme. Trying with default scheme..."
          # 如果指定scheme失败，尝试获取默认scheme
          DEFAULT_SCHEME=$(xcodebuild -list -project Focus.xcodeproj -json | grep -o '"scheme" : "[^"]*' | head -1 | cut -d'"' -f4)
          if [ -n "$DEFAULT_SCHEME" ]; then
            echo "Using default scheme: $DEFAULT_SCHEME"
            xcodebuild clean build -project Focus.xcodeproj -scheme "$DEFAULT_SCHEME" -configuration Release -derivedDataPath ./DerivedData CODE_SIGN_IDENTITY=- CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO
          else
            echo "Error: Could not determine default scheme. Build failed."
            exit 1
          fi
        }
        
        # 检查构建结果并复制到Build目录
        if [ -d "./DerivedData/Build/Products/Release/Focus.app" ]; then
          echo "Copying Focus.app to Build directory..."
          cp -R ./DerivedData/Build/Products/Release/Focus.app ./Build/
        else
          echo "Error: Could not find built app at expected location."
          echo "Searching for .app files:"
          find ./DerivedData -name "*.app" -type d
          
          # 尝试找到任何.app文件并使用它
          APP_PATH=$(find ./DerivedData -name "*.app" -type d | head -1)
          if [ -n "$APP_PATH" ]; then
            echo "Found app at: $APP_PATH"
            cp -R "$APP_PATH" ./Build/Focus.app
          else
            echo "Error: No .app files found in build output."
            exit 1
          fi
        fi
        
    - name: Create ZIP for distribution
      run: |
        echo "Creating ZIP archive..."
        if [ -d "./Build/Focus.app" ]; then
          cd ./Build
          zip -r Focus.zip Focus.app
          echo "Archive created successfully: Focus.zip"
          ls -la Focus.zip
        else
          echo "Error: Focus.app not found in Build directory."
          echo "Directory contents:"
          ls -la ./Build
          exit 1
        fi
        
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: Focus-app
        path: Build/Focus.zip
        if-no-files-found: error
        
    # 如果你想发布到GitHub Releases，取消以下注释
    # - name: Release
    #   uses: softprops/action-gh-release@v1
    #   if: startsWith(github.ref, 'refs/tags/')
    #   with:
    #     files: |
    #       Build/Focus.zip
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 